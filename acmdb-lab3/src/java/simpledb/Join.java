package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */

    private JoinPredicate _p;
    private DbIterator _child1, _child2;
    private Tuple _cursor;
    private Tuple left, right;

    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        _p = p;
        _child1 = child1;
        _child2 = child2;
        _cursor = null;
        left = null;
        right = null;
        // some code goes here
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return _p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return _child1.getTupleDesc().getFieldName(_p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return _child2.getTupleDesc().getFieldName(_p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(_child1.getTupleDesc(), _child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        _child1.open();
        _child2.open();
        // some code goes here
    }

    public void close() {
        super.close();
        _child1.close();
        _child2.close();
        // some code goes here
    }

    public void rewind() throws DbException, TransactionAbortedException {
        _child1.rewind();
        _child2.rewind();
        // some code goes here
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (left == null && _child1.hasNext()) left = _child1.next();

        while (left != null){
            while (_child2.hasNext()){
                right = _child2.next();
                if (_p.filter(left, right)){
                    Tuple next = new Tuple(this.getTupleDesc());
                    for (int i = 0; i < this.getTupleDesc().numFields(); i++)
                        if (i < left.getTupleDesc().numFields())
                            next.setField(i, left.getField(i));
                        else next.setField(i, right.getField(i - left.getTupleDesc().numFields()));
                    return next;
                }
            }

            if (!_child1.hasNext()) break;
            left = _child1.next();
            _child2.rewind();
        }
        return null;
        // some code goes here

//        Tuple left, right;
//
//        if (_cursor == null) {
//            if (_child1.hasNext()) left = _child1.next();
//            else return null;
//        }
//        left = _cursor;
//        while (left != null) {
//            while (_child2.hasNext()) {
//                right = _child2.next();
//                assert (left != null);
//                assert (right != null);
//                if (_p.filter(left, right)) {
//                    Tuple _return  = new Tuple(this.getTupleDesc());
//                    for (int i = 0; i < _return.getTupleDesc().numFields(); ++i) {
//                        if (i < left.getTupleDesc().numFields()) _return.setField(i, left.getField(i));
//                        else _return.setField(i, right.getField(i-left.getTupleDesc().numFields()));
//                    }
//                    _cursor = left;
//                    return _return;
//                }
//            }
//            if (!_child1.hasNext()) {
//                _cursor = left;
//                return null;
//            }
//            left = _child1.next();
//            _child2.rewind();
//        }
//        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[]{_child1, _child2};
        // some code goes here
    }

    @Override
    public void setChildren(DbIterator[] children) {
        _child1 = children[0];
        _child2 = children[1];
        // some code goes here
    }

}
